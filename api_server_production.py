# Security & Production Fixes

import os
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from langchain_google_genai import GoogleGenerativeAI, GoogleGenerativeAIEmbeddings
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import Chroma
from langchain.prompts import PromptTemplate
from langchain.chains import RetrievalQA
from langchain.memory import ConversationBufferMemory
from dotenv import load_dotenv
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded
from html import escape
import logging

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

app = FastAPI(title="KrushiVerse Agricultural Assistant API")

# Rate limiter
limiter = Limiter(key_func=get_remote_address)
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

# Security: Get allowed origins from environment
FRONTEND_URL = os.getenv("FRONTEND_URL", "http://localhost:3001")
ALLOWED_ORIGINS = [
    FRONTEND_URL,
    "http://localhost:3001",
    "http://127.0.0.1:3001",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# Add production domain if specified
PRODUCTION_DOMAIN = os.getenv("PRODUCTION_DOMAIN")
if PRODUCTION_DOMAIN:
    ALLOWED_ORIGINS.append(f"https://{PRODUCTION_DOMAIN}")
    ALLOWED_ORIGINS.append(f"https://www.{PRODUCTION_DOMAIN}")

app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Pydantic models
class ChatRequest(BaseModel):
    message: str
    language: str = "English"

class ChatResponse(BaseModel):
    response: str

# Validate API key on startup
@app.on_event("startup")
async def startup_event():
    """Validate configuration on startup"""
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        logger.error("GOOGLE_API_KEY not found in environment variables")
        raise ValueError("GOOGLE_API_KEY is required")
    logger.info("‚úÖ API key validated")
    logger.info(f"‚úÖ CORS allowed origins: {ALLOWED_ORIGINS}")

# Initialize RAG components
logger.info("Initializing RAG system...")

# Try Google embeddings first, fall back to HuggingFace
try:
    embeddings = GoogleGenerativeAIEmbeddings(
        model="models/embedding-001",
        google_api_key=os.getenv("GOOGLE_API_KEY")
    )
    logger.info("‚úÖ Using Google Generative AI Embeddings")
except Exception as e:
    logger.warning(f"Google embeddings failed: {e}. Falling back to HuggingFace.")
    embeddings = HuggingFaceEmbeddings(
        model_name="sentence-transformers/all-MiniLM-L6-v2"
    )
    logger.info("‚úÖ Using HuggingFace Embeddings")

# Load vector database
try:
    vectorstore = Chroma(
        persist_directory="./chroma_db",
        embedding_function=embeddings
    )
    logger.info("‚úÖ Vector database loaded successfully")
except Exception as e:
    logger.error(f"Failed to load vector database: {e}")
    raise

# Initialize LLM
llm = GoogleGenerativeAI(
    model="gemini-2.0-flash-exp",
    google_api_key=os.getenv("GOOGLE_API_KEY"),
    temperature=0.3
)

# Language-specific prompts
PROMPT_TEMPLATES = {
    "English": """You are a knowledgeable agricultural expert assistant specializing in sustainable farming practices for Pune district, Maharashtra, India.

Context from agricultural knowledge base:
{context}

User Question: {question}

Instructions:
- Provide detailed, practical advice based on the context provided
- If discussing bio-fertilizers, include: types, preparation methods, application rates, and benefits
- If the context doesn't contain relevant information, use your general agricultural knowledge
- Keep responses clear, actionable, and suitable for farmers
- Focus on sustainable and organic farming practices

Answer:""",
    
    "Hindi": """‡§Ü‡§™ ‡§™‡•Å‡§£‡•á ‡§ú‡§ø‡§≤‡§æ, ‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞, ‡§≠‡§æ‡§∞‡§§ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ü‡§ø‡§ï‡§æ‡§ä ‡§ï‡•É‡§∑‡§ø ‡§™‡•ç‡§∞‡§•‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û‡§§‡§æ ‡§∞‡§ñ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§è‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞ ‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•à‡§Ç‡•§

‡§ï‡•É‡§∑‡§ø ‡§ú‡•ç‡§û‡§æ‡§® ‡§Ü‡§ß‡§æ‡§∞ ‡§∏‡•á ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠:
{context}

‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®: {question}

‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂:
- ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§ø‡§è ‡§ó‡§è ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§, ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§∏‡§≤‡§æ‡§π ‡§¶‡•á‡§Ç
- ‡§ú‡•à‡§µ-‡§â‡§∞‡•ç‡§µ‡§∞‡§ï‡•ã‡§Ç ‡§™‡§∞ ‡§ö‡§∞‡•ç‡§ö‡§æ ‡§ï‡§∞‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç: ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞, ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§§‡§∞‡•Ä‡§ï‡•á, ‡§Ö‡§®‡•Å‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§¶‡§∞‡•á‡§Ç, ‡§î‡§∞ ‡§≤‡§æ‡§≠
- ‡§Ø‡§¶‡§ø ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠ ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§æ‡§∏‡§Ç‡§ó‡§ø‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§Ö‡§™‡§®‡•á ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
- ‡§ú‡§µ‡§æ‡§¨ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü, ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§î‡§∞ ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§∞‡§ñ‡•á‡§Ç
- ‡§ü‡§ø‡§ï‡§æ‡§ä ‡§î‡§∞ ‡§ú‡•à‡§µ‡§ø‡§ï ‡§ï‡•É‡§∑‡§ø ‡§™‡•ç‡§∞‡§•‡§æ‡§ì‡§Ç ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç

‡§â‡§§‡•ç‡§§‡§∞:""",
    
    "Marathi": """‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§™‡•Å‡§£‡•á ‡§ú‡§ø‡§≤‡•ç‡§π‡§æ, ‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞, ‡§≠‡§æ‡§∞‡§§‡§æ‡§∏‡§æ‡§†‡•Ä ‡§∂‡§æ‡§∂‡•ç‡§µ‡§§ ‡§∂‡•á‡§§‡•Ä ‡§™‡§¶‡•ç‡§ß‡§§‡•Ä‡§Ç‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§ú‡•ç‡§û‡§æ‡§® ‡§Ö‡§∏‡§≤‡•á‡§≤‡•á ‡§ï‡•É‡§∑‡•Ä ‡§§‡§ú‡•ç‡§û ‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø‡§ï ‡§Ü‡§π‡§æ‡§§‡•§

‡§ï‡•É‡§∑‡•Ä ‡§ú‡•ç‡§û‡§æ‡§® ‡§Ü‡§ß‡§æ‡§∞‡§æ‡§§‡•Ä‡§≤ ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠:
{context}

‡§µ‡§æ‡§™‡§∞‡§ï‡§∞‡•ç‡§§‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®: {question}

‡§∏‡•Ç‡§ö‡§®‡§æ:
- ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡•á‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠‡§æ‡§µ‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§§‡§™‡§∂‡•Ä‡§≤‡§µ‡§æ‡§∞, ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§¶‡•ç‡§Ø‡§æ
- ‡§ú‡•à‡§µ-‡§ñ‡§§‡§æ‡§Ç‡§µ‡§∞ ‡§ö‡§∞‡•ç‡§ö‡§æ ‡§ï‡§∞‡§§‡§æ‡§®‡§æ ‡§∏‡§Æ‡§æ‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ: ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞, ‡§§‡§Ø‡§æ‡§∞‡•Ä ‡§™‡§¶‡•ç‡§ß‡§§‡•Ä, ‡§µ‡§æ‡§™‡§∞ ‡§¶‡§∞, ‡§Ü‡§£‡§ø ‡§´‡§æ‡§Ø‡§¶‡•á
- ‡§ú‡§∞ ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠‡§æ‡§§ ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§®‡§∏‡•á‡§≤ ‡§§‡§∞ ‡§§‡•Å‡§Æ‡§ö‡•á ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ï‡•É‡§∑‡•Ä ‡§ú‡•ç‡§û‡§æ‡§® ‡§µ‡§æ‡§™‡§∞‡§æ
- ‡§â‡§§‡•ç‡§§‡§∞‡•á ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü, ‡§ï‡•É‡§§‡•Ä ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§Ü‡§£‡§ø ‡§∂‡•á‡§§‡§ï‡§±‡•ç‡§Ø‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§†‡•á‡§µ‡§æ
- ‡§∂‡§æ‡§∂‡•ç‡§µ‡§§ ‡§Ü‡§£‡§ø ‡§∏‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø ‡§∂‡•á‡§§‡•Ä ‡§™‡§¶‡•ç‡§ß‡§§‡•Ä‡§Ç‡§µ‡§∞ ‡§≤‡§ï‡•ç‡§∑ ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§§ ‡§ï‡§∞‡§æ

‡§â‡§§‡•ç‡§§‡§∞:"""
}

# Create QA chains for each language
qa_chains = {}
for lang, template in PROMPT_TEMPLATES.items():
    prompt = PromptTemplate(
        template=template,
        input_variables=["context", "question"]
    )
    
    qa_chains[lang] = RetrievalQA.from_chain_type(
        llm=llm,
        chain_type="stuff",
        retriever=vectorstore.as_retriever(search_kwargs={"k": 3}),
        chain_type_kwargs={"prompt": prompt},
        return_source_documents=False
    )

logger.info("‚úÖ RAG system initialized successfully")

# Enhanced responses for specific topics
def enhance_biofertilizer_response(response: str, language: str) -> str:
    """Add additional context for bio-fertilizer queries"""
    bio_keywords = {
        "English": ["bio", "fertilizer", "organic", "compost"],
        "Hindi": ["‡§ú‡•à‡§µ", "‡§â‡§∞‡•ç‡§µ‡§∞‡§ï", "‡§ú‡•à‡§µ‡§ø‡§ï", "‡§ñ‡§æ‡§¶"],
        "Marathi": ["‡§ú‡•à‡§µ", "‡§ñ‡§§", "‡§∏‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø", "‡§ï‡§Ç‡§™‡•ã‡§∏‡•ç‡§ü"]
    }
    
    if any(keyword in response.lower() for keyword in bio_keywords.get(language, [])):
        additions = {
            "English": "\n\nüí° Pro Tip: Always conduct a soil test before applying bio-fertilizers to determine exact nutrient requirements.",
            "Hindi": "\n\nüí° ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§∏‡§≤‡§æ‡§π: ‡§ú‡•à‡§µ-‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§≤‡§ó‡§æ‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§π‡§Æ‡•á‡§∂‡§æ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç‡•§",
            "Marathi": "\n\nüí° ‡§Æ‡§π‡§§‡•ç‡§µ‡§æ‡§ö‡§æ ‡§∏‡§≤‡•ç‡§≤‡§æ: ‡§ú‡•à‡§µ-‡§ñ‡§§ ‡§µ‡§æ‡§™‡§∞‡§£‡•ç‡§Ø‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡•Ä ‡§®‡•á‡§π‡§Æ‡•Ä ‡§Æ‡§æ‡§§‡•Ä‡§ö‡•Ä ‡§ö‡§æ‡§ö‡§£‡•Ä ‡§ï‡§∞‡§æ‡•§"
        }
        return response + additions.get(language, "")
    return response

# API Endpoints
@app.get("/health")
async def health_check():
    """Health check endpoint with database status"""
    try:
        # Test database connection
        collection_count = vectorstore._collection.count()
        return {
            "status": "healthy",
            "database_status": "connected",
            "document_count": collection_count,
            "embeddings": "HuggingFace" if isinstance(embeddings, HuggingFaceEmbeddings) else "Google"
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return JSONResponse(
            status_code=503,
            content={"status": "unhealthy", "error": str(e)}
        )

@app.post("/chat", response_model=ChatResponse)
@limiter.limit("20/minute")  # Rate limit: 20 requests per minute
async def chat_endpoint(request: Request, chat_request: ChatRequest):
    """Chat endpoint with RAG-enhanced responses"""
    try:
        # Input validation and sanitization
        if not chat_request.message or len(chat_request.message.strip()) == 0:
            return JSONResponse(
                status_code=400,
                content={"error": "Message cannot be empty"}
            )
        
        # Sanitize input (prevent XSS)
        sanitized_message = escape(chat_request.message)[:500]  # Limit to 500 chars
        
        # Validate language
        if chat_request.language not in PROMPT_TEMPLATES:
            chat_request.language = "English"
        
        logger.info(f"Chat request: {sanitized_message[:50]}... | Language: {chat_request.language}")
        
        # Get QA chain for selected language
        qa_chain = qa_chains.get(chat_request.language, qa_chains["English"])
        
        # Generate response
        result = qa_chain({"query": sanitized_message})
        response_text = result["result"]
        
        # Enhance response if needed
        enhanced_response = enhance_biofertilizer_response(response_text, chat_request.language)
        
        logger.info(f"Response generated successfully (length: {len(enhanced_response)})")
        
        return ChatResponse(response=enhanced_response)
    
    except Exception as e:
        logger.error(f"Error processing chat request: {str(e)}")
        return JSONResponse(
            status_code=500,
            content={"error": "Internal server error. Please try again later."}
        )

@app.get("/")
async def root():
    """Root endpoint"""
    return {
        "message": "KrushiVerse Agricultural Assistant API",
        "version": "1.0.0",
        "endpoints": {
            "health": "/health",
            "chat": "/chat (POST)",
            "docs": "/docs"
        }
    }

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 8002))
    uvicorn.run(app, host="0.0.0.0", port=port)
