import React, { useState, useRef, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { 
  IconButton, 
  Typography, 
  CircularProgress,
  Tooltip
} from "@mui/material";
import { 
  Mic, 
  MicOff, 
  Send, 
  Translate, 
  VolumeUp 
} from "@mui/icons-material";

// SVG Tick Icon
const TickIcon = (
  <svg width="26" height="26" viewBox="0 0 20 20" fill="none">
    <circle cx="10" cy="10" r="10" fill="#D1FADF" />
    <path d="M6.5 10.5L9 13L14 8" stroke="#12B76A" strokeWidth="2" strokeLinecap="round" />
  </svg>
);

const solutionCards = [
  {
    iconBg: "#d7f8e2",
    iconColor: "#22C55E",
    icon: (
      <svg width="32" height="32" fill="none" viewBox="0 0 24 24">
        <path d="M12 15.5a3.5 3.5 0 1 1 0-7 3.5 3.5 0 0 1 0 7Z" stroke="#22C55E" strokeWidth="2" />
        <path d="M12 2v3M12 19v3M4.22 4.22l2.12 2.12M17.66 17.66l2.12 2.12M2 12h3M19 12h3M4.22 19.78l2.12-2.12M17.66 6.34l2.12-2.12" stroke="#22C55E" strokeWidth="2" />
      </svg>
    ),
    title: "AI-Powered Plant Growth",
    desc: "Boost crop performance with AI-driven insights that optimize growth stages, from seedling to harvest, ensuring healthier plants and higher┬аproductivity."
  },
  {
    iconBg: "#e6f3fb",
    iconColor: "#23b0ff",
    icon: (
      <svg width="32" height="32" fill="none" viewBox="0 0 24 24">
        <path d="M20 17.58A4.422 4.422 0 0 0 16.2 13H7.8A4.424 4.424 0 0 0 4 17.58V18a4 4 0 0 0 4 4h8a4 4 0 0 0 4-4v-.42" stroke="#23b0ff" strokeWidth="2" />
        <path d="M9 14V9a3 3 0 1 1 6 0v5" stroke="#23b0ff" strokeWidth="2" />
      </svg>
    ),
    title: "Weather Prediction",
    desc: "Advanced weather forecasting with hyperlocal predictions to help plan irrigation, harvesting, and protection strategies."
  },
  {
    iconBg: "#fff3e6",
    iconColor: "#ff7f35",
    icon: (
      <svg width="32" height="32" fill="none" viewBox="0 0 24 24">
        <rect x="6" y="10" width="2" height="8" fill="#ff7f35" />
        <rect x="11" y="6" width="2" height="12" fill="#ff7f35" />
        <rect x="16" y="14" width="2" height="4" fill="#ff7f35" />
      </svg>
    ),
    title: "Yield Optimization",
    desc: "AI-driven recommendations for fertilizer application, irrigation scheduling, and harvest timing to maximize your yield."
  }
];

const farmingFeatures = [
  {
    title: "Remote Sensing Technology",
    desc: "Analyze crop health from space using multispectral satellite imagery and drone surveillance."
  },
  {
    title: "Predictive Analytics",
    desc: "Forecast crop diseases, pest outbreaks, and optimal harvest times with 95% accuracy."
  },
  {
    title: "Smart Recommendations",
    desc: "Get personalized advice on irrigation, fertilization, and crop protection based on your conditions."
  }
];

export default function SmartKrishiLanding() {
  const [isChatOpen, setChatOpen] = useState(false);
  const [messages, setMessages] = useState([
    { text: "рдирдорд╕реНрдХрд╛рд░! рдореА рдЖрдкрд▓рд╛ рдХреГрд╖реА рд╕рд╣рд╛рдпреНрдпрдХ рдЖрд╣реЗ. рдорд▓рд╛ рд╢реЗрддреА, рдкреАрдХ рдЖрдгрд┐ рдХреГрд╖реА рддрдВрддреНрд░рд╛рдмрджреНрджрд▓ рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░рд╛. ЁЯМ╛\n\nHello! I'm your agricultural assistant. Ask me about farming, crops, and agricultural techniques.", sender: "ai", timestamp: new Date() }
  ]);
  const [inputValue, setInputValue] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState("en-US");
  const [languageMenuAnchor, setLanguageMenuAnchor] = useState(null);
  
  const recognitionRef = useRef(null);
  const navigate = useNavigate();

  // Language options for speech recognition
  const languages = [
    { code: "en-US", name: "English (US)", flag: "ЁЯЗ║ЁЯЗ╕" },
    { code: "en-IN", name: "English (India)", flag: "ЁЯЗоЁЯЗ│" },
    { code: "hi-IN", name: "рд╣рд┐рдиреНрджреА (Hindi)", flag: "ЁЯЗоЁЯЗ│" },
    { code: "mr-IN", name: "рдорд░рд╛рдареА (Marathi)", flag: "ЁЯЗоЁЯЗ│" }
  ];

  // Speech Recognition Functions
  const startSpeechRecognition = () => {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      alert("Speech recognition not supported in this browser. Please use Chrome, Edge, or Safari.");
      return;
    }

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    recognitionRef.current = new SpeechRecognition();
    
    recognitionRef.current.continuous = false;
    recognitionRef.current.interimResults = false;
    recognitionRef.current.lang = selectedLanguage;
    
    recognitionRef.current.onstart = () => {
      setIsListening(true);
      console.log(`ЁЯОд Speech recognition started in ${selectedLanguage}`);
    };

    recognitionRef.current.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      console.log(`ЁЯОп Recognized: "${transcript}"`);
      setInputValue(transcript);
      setIsListening(false);
    };

    recognitionRef.current.onerror = (event) => {
      console.error(`тЭМ Speech recognition error:`, event.error);
      setIsListening(false);
      
      let errorMessage = "Speech recognition error: ";
      switch(event.error) {
        case 'network':
          errorMessage += "Network connection required for speech recognition.";
          break;
        case 'not-allowed':
          errorMessage += "Microphone access denied. Please allow microphone access.";
          break;
        case 'no-speech':
          errorMessage += "No speech detected. Please try again.";
          break;
        default:
          errorMessage += event.error;
      }
      alert(errorMessage);
    };

    recognitionRef.current.onend = () => {
      setIsListening(false);
      console.log("ЁЯПБ Speech recognition ended");
    };

    recognitionRef.current.start();
  };

  const stopSpeechRecognition = () => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }
    setIsListening(false);
  };

  // API Communication
  const sendMessage = async (messageText) => {
    if (!messageText.trim()) return;
    
    const userMessage = { 
      text: messageText, 
      sender: "user", 
      timestamp: new Date() 
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInputValue("");
    setIsLoading(true);

    try {
      // Try API first, fallback to local responses
      let aiResponse = null;
      
      try {
        const response = await fetch("http://127.0.0.1:8000/chat", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            message: messageText,
            conversation_history: messages.map(msg => ({
              role: msg.sender === "user" ? "user" : "assistant",
              content: msg.text
            }))
          }),
        });

        if (response.ok) {
          const data = await response.json();
          aiResponse = data.response;
        }
      } catch (apiError) {
        console.log("API not available, using local responses");
      }

      // Fallback to local responses if API fails
      if (!aiResponse) {
        const msg = messageText.toLowerCase();
        const agriKeywords = ['crop', 'farm', 'plant', 'seed', 'рд╢реЗрддреА', 'рдкреАрдХ', 'рдХреГрд╖реА', 'рдХрд┐рд╕рд╛рди', 'tomato', 'wheat', 'irrigation', 'fertilizer'];
        
        if (agriKeywords.some(keyword => msg.includes(keyword))) {
          if (msg.includes('tomato') || msg.includes('рдЯрдорд╛рдЯрд░')) {
            aiResponse = "ЁЯНЕ **рдЯреЛрдореЕрдЯреЛ рдкрд┐рдХрд╡рдгреНрдпрд╛рд╕рд╛рдареА:**\nтАв рдЪрд╛рдВрдЧрд▓реА рдирд┐рдЪрд░рд╛ рдЕрд╕рд▓реЗрд▓реА рдЬрдореАрди рд╡рд╛рдкрд░рд╛\nтАв рдпреЛрдЧреНрдп рдЕрдВрддрд░рд╛рд╡рд░ рд░реЛрдкреЗ рд▓рд╛рд╡рд╛ (2-3 рдлреВрдЯ)\nтАв рдирд┐рдпрдорд┐рдд рдкрд╛рдгреА рджреНрдпрд╛ рдкрдг рдЬрд╛рд╕реНрдд рдирд╛рд╣реА\nтАв NPK рдЦрдд рд╡рд╛рдкрд░рд╛\n\n**For tomato cultivation:**\nтАв Use well-drained soil\nтАв Plant with proper spacing (2-3 feet)\nтАв Regular but not excessive watering\nтАв Use NPK fertilizer";
          } else if (msg.includes('wheat') || msg.includes('рдЧрд╣реВ')) {
            aiResponse = "ЁЯМ╛ **рдЧрд╣реВ рдкрд┐рдХрд╡рдгреНрдпрд╛рд╕рд╛рдареА:**\nтАв рдСрдХреНрдЯреЛрдмрд░-рдиреЛрд╡реНрд╣реЗрдВрдмрд░рдордзреНрдпреЗ рдкреЗрд░рдгреА рдХрд░рд╛\nтАв 100-125 рдХрд┐рд▓реЛ рдмреАрдЬ рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯрд░\nтАв рдпреЛрдЧреНрдп рдЦрдд рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди\nтАв рддрдг рдирд┐рдпрдВрддреНрд░рдг рдорд╣рддреНрд╡рд╛рдЪреЗ\n\n**Wheat cultivation:**\nтАв Sow in October-November\nтАв 100-125 kg seeds per hectare\nтАв Proper fertilizer management\nтАв Weed control is important";
          } else if (msg.includes('water') || msg.includes('irrigation') || msg.includes('рдкрд╛рдгреА')) {
            aiResponse = "ЁЯТз **рдкрд╛рдгреА рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди:**\nтАв рд╕рдХрд╛рд│реА рдХрд┐рдВрд╡рд╛ рд╕рдВрдзреНрдпрд╛рдХрд╛рд│реА рдкрд╛рдгреА рджреНрдпрд╛\nтАв рдбреНрд░рд┐рдк рдЗрд░рд┐рдЧреЗрд╢рди рд╡рд╛рдкрд░рд╛\nтАв рдорд╛рддреА рдУрд▓реА рдареЗрд╡рд╛ рдкрдг рднрд┐рдЬрд╡реВ рдирдХрд╛\nтАв рдкрд╛рд╡рд╕рд╛рд│реНрдпрд╛рдд рдХрдореА рдкрд╛рдгреА рджреНрдпрд╛\n\n**Water management:**\nтАв Water in morning or evening\nтАв Use drip irrigation\nтАв Keep soil moist but not waterlogged\nтАв Reduce watering in monsoon";
          } else {
            aiResponse = "ЁЯМ╛ **рдХреГрд╖реА рд╕рд▓реНрд▓рд╛ / Agricultural Advice**\n\nрдореА рддреБрдордЪрд╛ рдХреГрд╖реА рд╕рд╣рд╛рдпреНрдпрдХ рдЖрд╣реЗ! рдорд▓рд╛ рдкреБрдвреАрд▓ рд╡рд┐рд╖рдпрд╛рдВрдмрджреНрджрд▓ рд╡рд┐рдЪрд╛рд░рд╛:\nI am your agricultural assistant! Ask me about:\n\nЁЯМ▒ **рдкреАрдХ рд▓рд╛рдЧрд╡рдб / Crop Cultivation**\nтАв рдЯреЛрдореЕрдЯреЛ, рдЧрд╣реВ, рднрд╛рдЬреАрдкрд╛рд▓рд╛ / Tomato, Wheat, Vegetables\n\nЁЯТз **рдкрд╛рдгреА рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди / Water Management**\nтАв рдкрд╛рдгреА рдкреБрд░рд╡рдард╛ / Irrigation methods\n\nЁЯМ┐ **рдЦрдд рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди / Fertilizer Management**\nтАв рд╕реЗрдВрджреНрд░рд┐рдп рдЦрдд / Organic fertilizers\n\nрдЕрдзрд┐рдХ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░рд╛! Ask more specific questions!";
          }
        } else {
          aiResponse = "рдорд▓рд╛ рдХреЗрд╡рд│ рд╢реЗрддреА рдЖрдгрд┐ рдХреГрд╖реА рд╕рдВрдмрдВрдзреА рдкреНрд░рд╢реНрдирд╛рдВрдЪреА рдЙрддреНрддрд░реЗ рджреЗрддрд╛ рдпреЗрддрд╛рдд. рдХреГрдкрдпрд╛ рд╢реЗрддреАрдмрджреНрджрд▓ рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░рд╛.\n\nI can only answer agriculture and farming related questions. Please ask about farming topics.";
        }
      }
      
      const aiMessage = {
        text: aiResponse,
        sender: "ai",
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, aiMessage]);
    } catch (error) {
      console.error("Error sending message:", error);
      const errorMessage = {
        text: "рдХреНрд╖рдорд╛ рдХрд░рд╛, рдорд▓рд╛ рддреБрдордЪреНрдпрд╛ рдкреНрд░рд╢реНрдирд╛рдЪреЗ рдЙрддреНрддрд░ рджреЗрдгреНрдпрд╛рдд рд╕рдорд╕реНрдпрд╛ рдЖрд▓реА рдЖрд╣реЗ. рдХреГрдкрдпрд╛ рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.\n\nSorry, I'm having trouble responding to your question. Please try again.",
        sender: "ai",
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSend = () => {
    sendMessage(inputValue);
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  return (
    <div style={{ fontFamily: "sans-serif", background: "#f9fafb", minHeight: "100vh" }}>
      {/* HERO SECTION */}
      <section
        style={{
          display: "flex",
          flexWrap: "wrap",
          alignItems: "center",
          justifyContent: "space-between",
          padding: "64px 5vw",
          minHeight: "60vh",
          background:
            "linear-gradient(90deg,rgba(255,255,255,0.8) 60%,rgba(255,255,255,0.1)), url('https://images.unsplash.com/photo-1464983953574-0892a716854b?auto=format&fit=crop&w=1350&q=80') right/cover",
        }}
      >
        <div style={{ maxWidth: 510 }}>
          <h1 style={{ fontSize: "3rem", fontWeight: "bold", marginBottom: 24, color: "#111827" }}>
            Empowering Farmers<br />with AI
          </h1>
          <p style={{ fontSize: "1.15rem", color: "#374151", marginBottom: 32 }}>
            Revolutionize farming with advanced AI solutions designed to boost productivity, reduce risks, and maximize crop yield.
          </p>
          <button
            style={{
              background: "#22C55E",
              color: "#fff",
              border: "none",
              borderRadius: 8,
              padding: "16px 32px",
              fontSize: "1.1rem",
              fontWeight: "bold",
              cursor: "pointer"
            }}
            onClick={() => navigate("/crop-insights")}
          >
            Get Insights
          </button>
        </div>
        <img
          src="https://images.unsplash.com/photo-1519125323398-675f0ddb6308?auto=format&fit=crop&w=600&q=80"
          alt="Drone"
          style={{
            width: 430,
            maxWidth: "90vw",
            height: "auto",
            borderRadius: 22,
            marginTop: 24,
            boxShadow: "0 8px 32px rgba(0,0,0,0.14)"
          }}
        />
      </section>

      {/* SOLUTION CARDS */}
      <section style={{ background: "#f7fafe", padding: "60px 3vw 50px" }}>
        <div style={{ textAlign: "center", marginBottom: 32 }}>
          <h2 style={{ fontWeight: "bold", fontSize: "2.2rem", color: "#23272e", marginBottom: 12 }}>
            Intelligent Agriculture Solutions
          </h2>
          <div style={{ fontSize: "1.1rem", color: "#556080" }}>
            Harness the power of AI to make informed farming decisions and optimize operations.
          </div>
        </div>
        <div
          style={{
            display: "grid",
            gridTemplateColumns: "repeat(auto-fit, minmax(280px, 1fr))",
            gap: 32,
            maxWidth: 1200,
            margin: "0 auto"
          }}
        >
          {solutionCards.map(({ iconBg, icon, title, desc }, idx) => (
            <div
              key={idx}
              style={{
                background: "white",
                borderRadius: 24,
                boxShadow: "0 4px 16px rgba(80,80,120,0.07)",
                padding: "40px 28px",
                textAlign: "left",
                minHeight: 290,
                display: "flex",
                flexDirection: "column",
                alignItems: "flex-start"
              }}
            >
              <span
                style={{
                  background: iconBg,
                  borderRadius: 16,
                  padding: 10,
                  color: icon.color,
                }}
              >
                {icon}
              </span>
              <h3 style={{ fontSize: "1.2rem", fontWeight: "bold", marginTop: 18, marginBottom: 12, color: "#23272e" }}>
                {title}
              </h3>
              <p style={{ fontSize: "1rem", color: "#6b7a8f", margin: 0 }}>{desc}</p>
            </div>
          ))}
        </div>
      </section>

      {/* How AI Transforms Farming */}
      <section
        style={{
          display: "flex",
          flexWrap: "wrap",
          justifyContent: "center",
          gap: 42,
          background: "white",
          padding: "70px 4vw",
        }}
      >
        <div style={{ maxWidth: 520, flex: "1 1 350px" }}>
          <h2 style={{ fontWeight: "bold", fontSize: 32, marginBottom: 26, color: "#23272e" }}>
            How AI Transforms Your Farming
          </h2>
          <p style={{ color: "#586074", fontSize: "1.18rem", marginBottom: 32 }}>
            Our advanced AI combines satellite imagery, weather data, and machine learning to provide actionable insights for modern farmers.
          </p>
          <ul style={{ listStyle: "none", padding: 0, margin: 0 }}>
            {farmingFeatures.map(({ title, desc }, idx) => (
              <li key={idx} style={{ display: "flex", gap: 10, marginBottom: 28, alignItems: "flex-start" }}>
                {TickIcon}
                <div>
                  <div style={{ fontWeight: "bold", fontSize: "1.1rem", color: "#113c25", marginBottom: 7 }}>{title}</div>
                  <div style={{ color: "#53606e", fontSize: "1rem" }}>{desc}</div>
                </div>
              </li>
            ))}
          </ul>
        </div>
        <div style={{ flex: "1 1 370px", display: "flex", justifyContent: "center", alignItems: "center" }}>
          <img
            src="https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=600&q=80"
            alt="AI crop dashboard"
            style={{ width: 470, maxWidth: "90vw", borderRadius: 32, boxShadow: "0 8px 38px rgba(0,0,0,0.09)" }}
          />
        </div>
      </section>

      {/* Enhanced Floating AI Chatbot */}
      <div style={{ position: "fixed", bottom: 24, right: 24, zIndex: 9999 }}>
        {!isChatOpen ? (
          <button
            onClick={() => setChatOpen(true)}
            style={{
              display: "flex",
              alignItems: "center",
              gap: 10,
              background: "#fff",
              color: "#000",
              border: "none",
              borderRadius: 14,
              padding: "18px 28px",
              fontSize: 16,
              fontWeight: 500,
              boxShadow: "0 6px 18px rgba(0,0,0,0.15)",
              cursor: "pointer",
              transition: "all 0.3s ease",
            }}
          >
            <img
              src="https://cdn-icons-png.flaticon.com/512/4712/4712035.png"
              alt="Chat"
              style={{ width: 22, height: 22 }}
            />
            Ask рдХреГрд╖реА Verse AI
          </button>
        ) : (
          <div
            style={{
              width: 400,
              height: 600,
              background: "#fff",
              borderRadius: 18,
              boxShadow: "0 10px 32px rgba(0,0,0,0.2)",
              display: "flex",
              flexDirection: "column",
              overflow: "hidden",
            }}
          >
            {/* Header */}
            <div
              style={{
                background: "linear-gradient(135deg, #22C55E 0%, #16A34A 100%)",
                color: "#fff",
                padding: "16px 20px",
                fontWeight: "bold",
                display: "flex",
                justifyContent: "space-between",
                alignItems: "center",
              }}
            >
              <div style={{ display: "flex", alignItems: "center", gap: 8 }}>
                <span style={{ fontSize: "18px" }}>ЁЯМ╛</span>
                <span style={{ fontSize: "16px" }}>рдХреГрд╖реА Verse AI</span>
              </div>
              <button
                onClick={() => setChatOpen(false)}
                style={{
                  background: "rgba(255,255,255,0.2)",
                  border: "none",
                  color: "#fff",
                  fontSize: 16,
                  cursor: "pointer",
                  borderRadius: "50%",
                  width: 28,
                  height: 28,
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center"
                }}
              >
                тЬХ
              </button>
            </div>

            {/* Messages Area */}
            <div
              style={{
                flex: 1,
                padding: "16px",
                overflowY: "auto",
                backgroundColor: "#f8fafc"
              }}
            >
              {messages.map((message, index) => (
                <div
                  key={index}
                  style={{
                    marginBottom: "12px",
                    display: "flex",
                    justifyContent: message.sender === "user" ? "flex-end" : "flex-start"
                  }}
                >
                  <div
                    style={{
                      maxWidth: "80%",
                      padding: "12px 16px",
                      borderRadius: message.sender === "user" ? "18px 18px 4px 18px" : "18px 18px 18px 4px",
                      background: message.sender === "user" ? "#22C55E" : "#fff",
                      color: message.sender === "user" ? "#fff" : "#374151",
                      fontSize: "14px",
                      lineHeight: "1.4",
                      boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
                      whiteSpace: "pre-wrap"
                    }}
                  >
                    {message.text}
                  </div>
                </div>
              ))}
              {isLoading && (
                <div style={{ display: "flex", justifyContent: "flex-start", marginBottom: "12px" }}>
                  <div
                    style={{
                      padding: "12px 16px",
                      borderRadius: "18px 18px 18px 4px",
                      background: "#fff",
                      boxShadow: "0 2px 8px rgba(0,0,0,0.1)"
                    }}
                  >
                    <CircularProgress size={20} sx={{ color: "#22C55E" }} />
                  </div>
                </div>
              )}
            </div>

            {/* Input Area */}
            <div
              style={{
                borderTop: "1px solid #e5e7eb",
                padding: "16px",
                background: "#fff"
              }}
            >
              {/* Voice Controls */}
              <div style={{ display: "flex", alignItems: "center", gap: 8, marginBottom: 12 }}>
                <Tooltip title={`Voice input (${languages.find(l => l.code === selectedLanguage)?.name})`}>
                  <IconButton
                    onClick={isListening ? stopSpeechRecognition : startSpeechRecognition}
                    sx={{
                      color: isListening ? "#ef4444" : "#22C55E",
                      backgroundColor: isListening ? "#fef2f2" : "#f0fdf4"
                    }}
                    size="small"
                  >
                    {isListening ? <MicOff /> : <Mic />}
                  </IconButton>
                </Tooltip>
                
                <Tooltip title="Select language">
                  <IconButton
                    onClick={(e) => setLanguageMenuAnchor(e.currentTarget)}
                    size="small"
                    sx={{ color: "#6b7280" }}
                  >
                    <Translate />
                  </IconButton>
                </Tooltip>
                
                <Typography variant="caption" sx={{ color: "#6b7280", fontSize: "12px" }}>
                  {languages.find(l => l.code === selectedLanguage)?.flag} {languages.find(l => l.code === selectedLanguage)?.name}
                </Typography>
              </div>

              {/* Language Selection Menu */}
              {Boolean(languageMenuAnchor) && (
                <div
                  style={{
                    position: 'fixed',
                    top: languageMenuAnchor?.getBoundingClientRect().bottom + 4 || 0,
                    left: languageMenuAnchor?.getBoundingClientRect().left || 0,
                    zIndex: 15000,
                    backgroundColor: '#fff',
                    borderRadius: 8,
                    boxShadow: '0 8px 32px rgba(0,0,0,0.15)',
                    border: '1px solid #e5e7eb',
                    minWidth: 180,
                    maxHeight: 200,
                    overflow: 'hidden'
                  }}
                >
                  {languages.map((lang) => (
                    <div
                      key={lang.code}
                      onClick={() => {
                        setSelectedLanguage(lang.code);
                        setLanguageMenuAnchor(null);
                      }}
                      style={{
                        padding: '12px 16px',
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'center',
                        backgroundColor: selectedLanguage === lang.code ? '#f0f9ff' : 'transparent',
                        borderLeft: selectedLanguage === lang.code ? '3px solid #0ea5e9' : '3px solid transparent',
                        transition: 'all 0.2s ease',
                        fontSize: '14px',
                        fontWeight: selectedLanguage === lang.code ? 600 : 400,
                        color: selectedLanguage === lang.code ? '#0369a1' : '#374151'
                      }}
                      onMouseEnter={(e) => {
                        if (selectedLanguage !== lang.code) {
                          e.target.style.backgroundColor = '#f8fafc';
                        }
                      }}
                      onMouseLeave={(e) => {
                        if (selectedLanguage !== lang.code) {
                          e.target.style.backgroundColor = 'transparent';
                        }
                      }}
                    >
                      <span style={{ marginRight: 8 }}>{lang.flag}</span>
                      {lang.name}
                    </div>
                  ))}
                </div>
              )}

              {/* Click outside to close */}
              {Boolean(languageMenuAnchor) && (
                <div
                  style={{
                    position: 'fixed',
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    zIndex: 14999,
                    background: 'transparent'
                  }}
                  onClick={() => setLanguageMenuAnchor(null)}
                />
              )}


              {/* Text Input */}
              <div style={{ display: "flex", gap: 8, alignItems: "flex-end" }}>
                <input
                  type="text"
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="рд╢реЗрддреАрдЪреЗ рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░рд╛... Ask farming questions..."
                  disabled={isLoading}
                  style={{
                    flex: 1,
                    border: "2px solid #e5e7eb",
                    borderRadius: 12,
                    padding: "12px 16px",
                    outline: "none",
                    fontSize: 14,
                    color: "#374151",
                    backgroundColor: isLoading ? "#f9fafb" : "#fff",
                    fontFamily: "inherit",
                    transition: "border-color 0.2s ease",
                    lineHeight: "1.4"
                  }}
                  onFocus={(e) => {
                    e.target.style.borderColor = "#22C55E";
                    e.target.style.color = "#111827";
                  }}
                  onBlur={(e) => {
                    e.target.style.borderColor = "#e5e7eb";
                    e.target.style.color = "#374151";
                  }}
                />
                <IconButton
                  onClick={handleSend}
                  disabled={!inputValue.trim() || isLoading}
                  sx={{
                    backgroundColor: "#22C55E",
                    color: "#fff",
                    "&:hover": { backgroundColor: "#16A34A" },
                    "&:disabled": { backgroundColor: "#e5e7eb", color: "#9ca3af" }
                  }}
                >
                  <Send />
                </IconButton>
              </div>
              
              {isListening && (
                <Typography
                  variant="caption"
                  sx={{
                    color: "#ef4444",
                    fontSize: "12px",
                    marginTop: "8px",
                    display: "flex",
                    alignItems: "center",
                    gap: 1
                  }}
                >
                  ЁЯОд Listening... Speak now in {languages.find(l => l.code === selectedLanguage)?.name}
                </Typography>
              )}
            </div>
          </div>
        )}
      </div>

      {/* Footer */}
      <footer style={{
        background: 'linear-gradient(90deg,#159E39 66%,#63B958 99%)',
        color: 'white',
        paddingTop: 56,
        paddingBottom: 28,
        paddingLeft: '5vw',
        paddingRight: '5vw',
        marginTop: 56
      }}>
        <div style={{
          display: 'flex',
          flexWrap: 'wrap',
          justifyContent: 'space-between',
          maxWidth: 1200,
          margin: '0 auto',
          gap: 40
        }}>
          {/* Brand/Desc */}
          <div style={{ flex: '1 1 200px', minWidth: 200 }}>
            <h2 style={{ color: '#fff', fontFamily: 'cursive', fontWeight: 'bold', fontSize: 26, marginBottom: 12 }}>рдХреГрд╖реА Verse</h2>
            <p style={{ color: '#e7fbe7', fontSize: 16, marginBottom: 20 }}>
              Empowering farmers with AI-driven insights for sustainable and profitable agriculture.
            </p>
            <div style={{ display: 'flex', gap: 18 }}>
              <a href="#" style={{ color: '#fff' }}><i className="fa fa-facebook"></i> <svg height={22} width={22} viewBox="0 0 24 24" fill="#fff"><path d="M9 8H6v4h3v12h6V12h4l1-4h-5V4c0-1 1-2 2-2h3V0h-4c-3 0-6 3-6 6v2z"/></svg></a>
              <a href="#" style={{ color: '#fff' }}><svg height={22} width={22} viewBox="0 0 24 24" fill="#fff"><circle cx="12" cy="12" r="10" /><path d="M19 6.5l-7 7-3.5-3.5" stroke="#159E39" strokeWidth="2" fill="none"/></svg></a>
              <a href="#" style={{ color: '#fff' }}><svg height={22} width={22} viewBox="0 0 24 24" fill="#fff"><circle cx="12" cy="12" r="10" /><rect x="8" y="8" width="8" height="8" fill="#159E39"/></svg></a>
            </div>
          </div>
          {/* Quick Links */}
          <div style={{ flex: '1 1 150px', minWidth: 150 }}>
            <h3 style={{ fontSize: 19, fontWeight: 'bold', marginBottom: 16, color: '#fff' }}>Quick Links</h3>
            <ul style={{ listStyle: 'none', padding: 0, margin: 0, color: '#e7fbe7', fontSize: 16 }}>
              <li><a href="/" style={{ color: '#e7fbe7', textDecoration: 'none' }}>Home</a></li>
              <li><a href="/about" style={{ color: '#e7fbe7', textDecoration: 'none' }}>About</a></li>
              <li><a href="/crop-insights" style={{ color: '#e7fbe7', textDecoration: 'none' }}>Crop Insights</a></li>
              <li><a href="/contact" style={{ color: '#e7fbe7', textDecoration: 'none' }}>Contact</a></li>
            </ul>
          </div>
          {/* Services */}
          <div style={{ flex: '1 1 170px', minWidth: 170 }}>
            <h3 style={{ fontSize: 19, fontWeight: 'bold', marginBottom: 16, color: '#fff' }}>Services</h3>
            <ul style={{ listStyle: 'none', padding: 0, margin: 0, color: '#e7fbe7', fontSize: 16 }}>
              <li>Crop Monitoring</li>
              <li>Weather Prediction</li>
              <li>Yield Optimization</li>
              <li>AI Recommendations</li>
            </ul>
          </div>
          {/* Account */}
          <div style={{ flex: '1 1 170px', minWidth: 170 }}>
            <h3 style={{ fontSize: 19, fontWeight: 'bold', marginBottom: 16, color: '#fff' }}>Account</h3>
            <ul style={{ listStyle: 'none', padding: 0, margin: 0, color: '#e7fbe7', fontSize: 16 }}>
              <li><a href="/login" style={{ color: '#e7fbe7', textDecoration: 'none' }}>Login</a></li>
              <li><a href="/register" style={{ color: '#e7fbe7', textDecoration: 'none' }}>Register</a></li>
              <li><a href="/support" style={{ color: '#e7fbe7', textDecoration: 'none' }}>Support</a></li>
              <li>Privacy Policy</li>
            </ul>
          </div>
        </div>
        {/* Bottom */}
        <div style={{ marginTop: 40, paddingTop: 20, borderTop: '1px solid #45be6d', color: '#e7fbe7', fontSize: 15, display: 'flex', justifyContent: 'space-between', alignItems: 'center', flexWrap: 'wrap'}}>
          <div>
            ┬й 2025 рдХреГрд╖реА Verse. All rights reserved. Empowering farmers with intelligent agriculture solutions.
          </div>
          <div style={{ fontSize: 13 }}>
            Designed by <a href="https://readdy.link" style={{ color: '#e7fbe7', textDecoration: 'underline' }}>Readdy</a>
          </div>
        </div>
      </footer>
    </div>
  );
}
